import{_ as a,c as e,o as t,a3 as o}from"./chunks/framework.Bd41z3wI.js";const r="/docs/assets/image.BcWEJ6WS.png",i="/docs/assets/image-4.DLqluTFR.png",s="/docs/assets/image-8.CE-GjcpT.png",n="/docs/assets/image-9.Yg78UAO9.png",l="/docs/assets/image-10.DF5P-zi-.png",d="/docs/assets/image-13.D4YM6Eh3.png",c="/docs/assets/image-12.CSsevpH7.png",h="/docs/assets/image-14.DQTBgdDU.png",D=JSON.parse('{"title":"React18/19","description":"","frontmatter":{},"headers":[],"relativePath":"frameworks/React/index.md","filePath":"frameworks/React/index.md","lastUpdated":1747235418000}'),m={name:"frameworks/React/index.md"},p=o('<h1 id="react18-19" tabindex="-1">React18/19 <a class="header-anchor" href="#react18-19" aria-label="Permalink to &quot;React18/19&quot;">​</a></h1><h2 id="react-的生命周期" tabindex="-1">React 的生命周期 <a class="header-anchor" href="#react-的生命周期" aria-label="Permalink to &quot;React 的生命周期&quot;">​</a></h2><h3 id="第一阶段" tabindex="-1">第一阶段 <a class="header-anchor" href="#第一阶段" aria-label="Permalink to &quot;第一阶段&quot;">​</a></h3><ol><li>执行组件的 constructor 方法 (初始化)</li><li>执行组件的 render(渲染) 方法</li><li>执行组件的 componentDidMount (挂载到 dom)方法</li></ol><h3 id="第二阶段" tabindex="-1">第二阶段 <a class="header-anchor" href="#第二阶段" aria-label="Permalink to &quot;第二阶段&quot;">​</a></h3><p>4.组件的 DOM 更新完成 dom 发生变化 componentDidUpdate (更新) 方法 5.组件的 DOM 被移除 componentWillUnmount (卸载) 方法</p><h2 id="生命周期过程" tabindex="-1">生命周期过程 <a class="header-anchor" href="#生命周期过程" aria-label="Permalink to &quot;生命周期过程&quot;">​</a></h2><p><img src="'+r+`" alt="alt text"></p><h2 id="生命周期使用" tabindex="-1">生命周期使用 <a class="header-anchor" href="#生命周期使用" aria-label="Permalink to &quot;生命周期使用&quot;">​</a></h2><h3 id="_1-componentdidmount-会在组件挂在后插入-dom-树中立即执行" tabindex="-1">1.componentDidMount()会在组件挂在后插入 dom 树中立即执行 <a class="header-anchor" href="#_1-componentdidmount-会在组件挂在后插入-dom-树中立即执行" aria-label="Permalink to &quot;1.componentDidMount()会在组件挂在后插入 dom 树中立即执行&quot;">​</a></h3><h3 id="_2-componentdidmount-中可以进行一些初始化操操作" tabindex="-1">2.componentDidMount(){}中可以进行一些初始化操操作 <a class="header-anchor" href="#_2-componentdidmount-中可以进行一些初始化操操作" aria-label="Permalink to &quot;2.componentDidMount(){}中可以进行一些初始化操操作&quot;">​</a></h3><h5 id="_2-1-依赖于-dom-的操作可以在这里进行" tabindex="-1">2.1 依赖于 dom 的操作可以在这里进行 <a class="header-anchor" href="#_2-1-依赖于-dom-的操作可以在这里进行" aria-label="Permalink to &quot;2.1 依赖于 dom 的操作可以在这里进行&quot;">​</a></h5><h5 id="_2-2-可以进行网络请求-或者定时器操作-但是不要在里面进行-setstate-操作-因为-setstate-会触发生命周期-导致死循环" tabindex="-1">2.2 可以进行网络请求，或者定时器操作，但是不要在里面进行 setState 操作，因为 setState 会触发生命周期，导致死循环 <a class="header-anchor" href="#_2-2-可以进行网络请求-或者定时器操作-但是不要在里面进行-setstate-操作-因为-setstate-会触发生命周期-导致死循环" aria-label="Permalink to &quot;2.2 可以进行网络请求，或者定时器操作，但是不要在里面进行 setState 操作，因为 setState 会触发生命周期，导致死循环&quot;">​</a></h5><h5 id="_2-3-可以在此处添加一些订阅-会在组件卸载时取消订阅" tabindex="-1">2.3 可以在此处添加一些订阅(会在组件卸载时取消订阅) <a class="header-anchor" href="#_2-3-可以在此处添加一些订阅-会在组件卸载时取消订阅" aria-label="Permalink to &quot;2.3 可以在此处添加一些订阅(会在组件卸载时取消订阅)&quot;">​</a></h5><h2 id="组件的通信" tabindex="-1">组件的通信 <a class="header-anchor" href="#组件的通信" aria-label="Permalink to &quot;组件的通信&quot;">​</a></h2><h3 id="_1-父组件向子组件传递数据" tabindex="-1">1.父组件向子组件传递数据 <a class="header-anchor" href="#_1-父组件向子组件传递数据" aria-label="Permalink to &quot;1.父组件向子组件传递数据&quot;">​</a></h3><h5 id="父组件在展示子组件的时候-可能会传递一些数据给子组件。" tabindex="-1">父组件在展示子组件的时候，可能会传递一些数据给子组件。 <a class="header-anchor" href="#父组件在展示子组件的时候-可能会传递一些数据给子组件。" aria-label="Permalink to &quot;父组件在展示子组件的时候，可能会传递一些数据给子组件。&quot;">​</a></h5><h5 id="_1-1-父组件通过属性-值的方式传递给子组件" tabindex="-1">1.1 父组件通过属性=值的方式传递给子组件 <a class="header-anchor" href="#_1-1-父组件通过属性-值的方式传递给子组件" aria-label="Permalink to &quot;1.1 父组件通过属性=值的方式传递给子组件&quot;">​</a></h5><h5 id="_1-2-子组件通过-props-参数来接受父组件传递过来的数据" tabindex="-1">1.2 子组件通过 props 参数来接受父组件传递过来的数据 <a class="header-anchor" href="#_1-2-子组件通过-props-参数来接受父组件传递过来的数据" aria-label="Permalink to &quot;1.2 子组件通过 props 参数来接受父组件传递过来的数据&quot;">​</a></h5><h3 id="举例" tabindex="-1">举例 <a class="header-anchor" href="#举例" aria-label="Permalink to &quot;举例&quot;">​</a></h3><pre><code>&lt;!-- 父组件传递 --&gt;
</code></pre><p><img src="`+i+`" alt="alt text"></p><pre><code>&lt;!-- 子组件接受  --&gt;
</code></pre><p>解构 props</p><p><img src="`+s+'" alt="alt text"></p><p>使用 props 的数据并展示</p><p><img src="'+n+'" alt="alt text"></p><h3 id="_2-子组件向父组件传递数据" tabindex="-1">2.子组件向父组件传递数据 <a class="header-anchor" href="#_2-子组件向父组件传递数据" aria-label="Permalink to &quot;2.子组件向父组件传递数据&quot;">​</a></h3><h4 id="_1-在子组件中监听需要操作-定义一个方法" tabindex="-1">1.在子组件中监听需要操作,定义一个方法 <a class="header-anchor" href="#_1-在子组件中监听需要操作-定义一个方法" aria-label="Permalink to &quot;1.在子组件中监听需要操作,定义一个方法&quot;">​</a></h4><p><img src="'+l+'" alt="alt text"></p><h4 id="_2-父组件中传入一个方法-并定义一个事件-具体的某一个操作" tabindex="-1">2.父组件中传入一个方法，并定义一个事件（具体的某一个操作） <a class="header-anchor" href="#_2-父组件中传入一个方法-并定义一个事件-具体的某一个操作" aria-label="Permalink to &quot;2.父组件中传入一个方法，并定义一个事件（具体的某一个操作）&quot;">​</a></h4><p><img src="'+d+'" alt="alt text"><img src="'+c+'" alt="alt text"></p><h4 id="_3-在子组件当中调用方法-并传入参数也就在子组件监听的方法中调用父组件传入的方法-并传入参数" tabindex="-1">3.在子组件当中调用方法，并传入参数也就在子组件监听的方法中调用父组件传入的方法，并传入参数 <a class="header-anchor" href="#_3-在子组件当中调用方法-并传入参数也就在子组件监听的方法中调用父组件传入的方法-并传入参数" aria-label="Permalink to &quot;3.在子组件当中调用方法，并传入参数也就在子组件监听的方法中调用父组件传入的方法，并传入参数&quot;">​</a></h4><p><img src="'+h+'" alt="alt text"></p><h3 id="父子组件通信案例" tabindex="-1">父子组件通信案例 <a class="header-anchor" href="#父子组件通信案例" aria-label="Permalink to &quot;父子组件通信案例&quot;">​</a></h3>',35),_=[p];function u(q,b,x,f,g,k){return t(),e("div",null,_)}const S=a(m,[["render",u]]);export{D as __pageData,S as default};
