import{_ as e,c as o,o as n,a3 as p}from"./chunks/framework.Bd41z3wI.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Other/monorepo/index.md","filePath":"Other/monorepo/index.md","lastUpdated":null}'),t={name:"Other/monorepo/index.md"},a=p('<h2 id="monorepo-架构" tabindex="-1">monorepo 架构 <a class="header-anchor" href="#monorepo-架构" aria-label="Permalink to &quot;monorepo 架构&quot;">​</a></h2><p>谁在用 vue 源码 element-plus 源码 react 源码 vite 源码</p><p>monorepo 基于 npm 不行 yarn 可以 pnpm 常用 pnpm 对比 npm npm 非扁平化<br> vue react 共用模块 版本一样 在外层安装 node-modules vue react 共用模块 版本不一样 vue，react 分别安装 node-modules</p><p>pnpm 扁平化 全局仓库 .pnpm.store 底层原理 软链接和硬链接 软链接 快捷方式 相同的依赖 硬链接 比作引用类型 不同的依赖</p><p>硬链接 去仓库.pnpm-store 拿到依赖 node_modules 软链接 拷贝 查找项目中 能够复用的依赖尽量帮你服用节省磁盘空间，避免重新下载</p><h2 id="monorepo-配合-pnpm-去做" tabindex="-1">monorepo 配合 pnpm 去做 <a class="header-anchor" href="#monorepo-配合-pnpm-去做" aria-label="Permalink to &quot;monorepo 配合 pnpm 去做&quot;">​</a></h2><p>1.配置文件 pnpm-workspace.yaml 切换到根目录 pnpm install 安装依赖 2.共用重复的依赖 去 package.json 里面配置 &quot;name&quot;: &quot;@web/xxxx&quot;, 使用 pnpm add 公共的模块@web/xxxx --filter @web/xxxx 需要安装依赖 项目里面直接可以用 实时更新</p>',7),r=[a];function m(s,d,c,l,i,_){return n(),o("div",null,r)}const h=e(t,[["render",m]]);export{x as __pageData,h as default};
